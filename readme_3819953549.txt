Author: Kevin Zhou
Email: zhouk@usc.edu

In PA2 I updated the code to PA1 to have the each individual connection be able to store pointers to its friends. In order to do this a vector of pointers to connection objects was added. I implemented a function that connects two connections as friends in the network class. This essentially traverses the list and returns pointers to the two nodes using the search function. I then called a new function that adds a pointer to the vector for each connection class. 

The codenames for the new friends to be printed were generated by calling a method in the misc.cpp file that concatenates two strings and removes all the spaces. This was done using packages from the algorithms library.

Next I fixed the dependency issue for the saveDB method. First of all I implemented a write_connection method to be called by saveDB amd then modified the function in the network class to take a file pointer.

Lastly I implemented both the mandatory loadDB method and the extra credit saveDB method. to do this I had to add a vector of strings to each connection. This was done because both the load and save functions traverse the list twice. For the load function I stpre the contacts of each connection as a string first and then add them as connections (pointers) on the second pass through. This was done as the connections do not exist as objects when the program is parsing the file. For the remove method the program traverses through the LL and removes the node first just as in PA1. Then the program is traversed a second time looking through each connection to remove the string codename of the node from each connection and the pointer that corresponds to it in myfriends.

During tested no memory leaks were detected using valgrind and no segmentation faults or crashes were detected.


